/*
 * This class displays the panel to show the exclusive type multiple choice
 * question.
 * Created on Apr 11, 2011, 3:21:48 PM
 */
package org.jdesktop.wonderland.modules.isocial.generic.client;

import java.awt.Font;
import java.util.Iterator;
import java.util.List;
import javax.swing.JRadioButton;
import org.jdesktop.wonderland.modules.isocial.generic.common.GenericAnswer;

/**
 *
 * @author Kaustubh
 */
public class MCQExclusivePanel extends javax.swing.JPanel {

    /** Creates new form MCQInclusivePanel */
    public MCQExclusivePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        textFieldPanel = new javax.swing.JPanel();
        questionField = new javax.swing.JScrollPane();
        questionArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(400, 310));

        textFieldPanel.setLayout(new java.awt.BorderLayout());

        questionArea.setBackground(new java.awt.Color(238, 238, 238));
        questionArea.setColumns(20);
        questionArea.setEditable(false);
        questionArea.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        questionArea.setLineWrap(true);
        questionArea.setRows(5);
        questionArea.setWrapStyleWord(true);
        questionField.setViewportView(questionArea);

        textFieldPanel.add(questionField, java.awt.BorderLayout.CENTER);

        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonPanel.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        buttonPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 3));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textFieldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(textFieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JTextArea questionArea;
    private javax.swing.JScrollPane questionField;
    private javax.swing.JPanel textFieldPanel;
    // End of variables declaration//GEN-END:variables

    void setTitle(String title) {
    }

    void setQuestion(String value) {
        this.questionArea.setText((value == null) ? "Question" : value);
    }

    /**
     * This method sets the initial answer options for multiple choice exclusive
     * type question.
     * 
     * @param answers
     */
    void setAnswers(List<GenericAnswer> answers) {
        for (Iterator<GenericAnswer> it = answers.iterator(); it.hasNext();) {
            GenericAnswer genericAnswer = it.next();
            JRadioButton button = new JRadioButton(genericAnswer.getValue());
            button.setFont((new Font("Lucida Grande", 0, 14)));
            button.setActionCommand(genericAnswer.getValue());
            buttonPanel.add(button);
            buttonGroup1.add(button);
        }
    }

    /**
     * This method returns the selected answer from the panel.
     * @return
     */
    String getSelectedAnswers() {
        if (buttonGroup1.getSelection() != null) {
            String option = buttonGroup1.getSelection().getActionCommand();
            return option;
        }
        return "";
    }
}
